# GEX Number 1 Jan 26, 2024
# Twitter @2187Nick

declare upper;
declare once_per_bar;
input strikeSpacing = 1.0;
input setThreshold = 20;
def threshold = setThreshold;
input strikes = 10;


input PreMarket = {default "false", "true"};
def day = if !PreMarket then 0 else 1;

input ManuallySetExpiration = {default "false", "true"};
input Expiration_YYMMDD = 240216;
def DateString_auto = GetYYYYMMDD()-20000000;
def DateString = if manuallysetexpiration then Expiration_YYMMDD else  DateString_auto;

def agg = AggregationPeriod.DAY;
def openlevel = close(period = agg);
def rounding_factor = if strikeSpacing > 1 and strikeSpacing < 25 then -1 else if strikeSpacing > 24 then -2 else 0;
def floor_or_ceiling =  Round(openlevel, rounding_factor);
def base_strike = floor_or_ceiling;
#addlabel(yes, "base_strike: " + base_strike, color.cyan);

def seconds_left = SecondsTillTime(1615);
def hours_left = seconds_left / 3600;
def days_left = if hours_left <= 0 then 0 else hours_left / 24;

def Vol = imp_volatility(getSymbol());
#addlabel(yes, "Vol: " + Vol, color.white);
def S = close();
#def S = close(period = agg);
#addlabel(yes, "S_close: " + S, color.white);

def t = ((DateString - DateString_auto) + days_left) / 365;
#addlabel(yes, "t: " + t);
#def t = 1/365;
def Sqr_Vol_2 = Sqr(Vol)*.5* t;
def Vol_Sqrt_t = Vol * Sqrt(t);
def Sqrt_2pi = 2.5066;
def Vol_Sqrt_t_S = S * Vol_Sqrt_t;

def strike_base = base_strike;
def strike_plus1 = base_strike + strikeSpacing;
def strike_plus2 = base_strike + strikeSpacing * 2;
def strike_plus3 = base_strike + strikeSpacing * 3;
def strike_plus4 = base_strike + strikeSpacing * 4;
def strike_plus5 = base_strike + strikeSpacing * 5;
def strike_plus6 = base_strike + strikeSpacing * 6;
def strike_plus7 = base_strike + strikeSpacing * 7;
def strike_plus8 = base_strike + strikeSpacing * 8;
def strike_plus9 = base_strike + strikeSpacing * 9;
def strike_plus10 = base_strike + strikeSpacing * 10;

def strike_minus1 = base_strike - strikeSpacing;
def strike_minus2 = base_strike - strikeSpacing * 2;
def strike_minus3 = base_strike - strikeSpacing * 3;
def strike_minus4 = base_strike - strikeSpacing * 4;
def strike_minus5 = base_strike - strikeSpacing * 5;
def strike_minus6 = base_strike - strikeSpacing * 6;
def strike_minus7 = base_strike - strikeSpacing * 7;
def strike_minus8 = base_strike - strikeSpacing * 8;
def strike_minus9 = base_strike - strikeSpacing * 9;
def strike_minus10 = base_strike - strikeSpacing * 10;

Script GEX {
    input strike = 0;
    input dateString = 0;
    input Vol = 0;
    input t = 0;
    input S = 0;
    input todayoryday = 0;
    input Sqr_Vol_2 = 0;
    input Vol_Sqrt_t = 0;
    input Vol_Sqrt_t_S = 0;
    def gamma = (Exp(-.5*(Sqr((Log(S / strike) + Sqr_Vol_2) / Vol_Sqrt_t) )) /2.5066) / Vol_Sqrt_t_S;

    plot strikeGEX = if IsNan(Round(open_interest("."+ getSymbol() + AsPrice(dateString) + "C" + AsPrice(strike),AggregationPeriod.DAY)[todayoryday] - open_interest("."+ getSymbol() + AsPrice(dateString) + "P" + AsPrice(strike),AggregationPeriod.DAY)[todayoryday]) * gamma)
then double.nan else 

Round((open_interest("."+ getSymbol() + AsPrice(dateString) + "C" + AsPrice(strike),AggregationPeriod.DAY)[todayoryday] - open_interest("."+ getSymbol() + AsPrice(dateString) + "P" + AsPrice(strike),AggregationPeriod.DAY)[todayoryday]) * gamma*S/10000,0);
}

def strike_base_gex = GEX(strike_base, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;

def strike_plus1_gex = GEX(strike_plus1, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
#addlabel(yes, "strike_plus1_gex : " + strike_plus1_gex);
def strike_plus2_gex = GEX(strike_plus2, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_plus3_gex = GEX(strike_plus3, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_plus4_gex = GEX(strike_plus4, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_plus5_gex = GEX(strike_plus5, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_plus6_gex = GEX(strike_plus6, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_plus7_gex = GEX(strike_plus7, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_plus8_gex = GEX(strike_plus8, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_plus9_gex = GEX(strike_plus9, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_plus10_gex = GEX(strike_plus10, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;

def strike_minus1_gex = GEX(strike_minus1, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus2_gex = GEX(strike_minus2, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus3_gex = GEX(strike_minus3, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus4_gex = GEX(strike_minus4, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus5_gex = GEX(strike_minus5, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus6_gex = GEX(strike_minus6, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus7_gex = GEX(strike_minus7, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus8_gex = GEX(strike_minus8, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus9_gex = GEX(strike_minus9, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;
def strike_minus10_gex = GEX(strike_minus10, dateString, Vol, t, S, day, Sqr_Vol_2, Vol_Sqrt_t, Vol_Sqrt_t_S).strikeGEX;

def base_gex = if IsNan(strike_base_gex) then 0 else if AbsValue(strike_base_gex) > threshold then AbsValue(strike_base_gex) else 0;
    def plus1_gex = if IsNan(strike_plus1_gex) then 0 else if AbsValue(strike_plus1_gex) > threshold then AbsValue(strike_plus1_gex) else 0;
    def plus2_gex = if IsNan(strike_plus2_gex) then 0 else if AbsValue(strike_plus2_gex) > threshold then AbsValue(strike_plus2_gex) else 0;
    def plus3_gex = if IsNan(strike_plus3_gex) then 0 else if AbsValue(strike_plus3_gex) > threshold then AbsValue(strike_plus3_gex) else 0;
    def plus4_gex = if IsNan(strike_plus4_gex) then 0 else if AbsValue(strike_plus4_gex) > threshold then AbsValue(strike_plus4_gex) else 0;
    def plus5_gex = if IsNan(strike_plus5_gex) then 0 else if AbsValue(strike_plus5_gex) > threshold then AbsValue(strike_plus5_gex) else 0;
    def plus6_gex = if IsNan(strike_plus6_gex) then 0 else if AbsValue(strike_plus6_gex) > threshold then AbsValue(strike_plus6_gex) else 0;
    def plus7_gex = if IsNan(strike_plus7_gex) then 0 else if AbsValue(strike_plus7_gex) > threshold then AbsValue(strike_plus7_gex) else 0;
    def plus8_gex = if IsNan(strike_plus8_gex) then 0 else if AbsValue(strike_plus8_gex) > threshold then AbsValue(strike_plus8_gex) else 0;
    def plus9_gex = if IsNan(strike_plus9_gex) then 0 else if AbsValue(strike_plus9_gex) > threshold then AbsValue(strike_plus9_gex) else 0;
    def plus10_gex = if IsNan(strike_plus10_gex) then 0 else if AbsValue(strike_plus10_gex) > threshold then AbsValue(strike_plus10_gex) else 0;
        
    def minus1_gex = if IsNan(strike_minus1_gex) then 0 else if AbsValue(strike_minus1_gex) > threshold then AbsValue(strike_minus1_gex) else 0;
    def minus2_gex = if IsNan(strike_minus2_gex) then 0 else if AbsValue(strike_minus2_gex) > threshold then AbsValue(strike_minus2_gex) else 0;
    def minus3_gex = if IsNan(strike_minus3_gex) then 0 else if AbsValue(strike_minus3_gex) > threshold then AbsValue(strike_minus3_gex) else 0;
    def minus4_gex = if IsNan(strike_minus4_gex) then 0 else if AbsValue(strike_minus4_gex) > threshold then AbsValue(strike_minus4_gex) else 0;
    def minus5_gex = if IsNan(strike_minus5_gex) then 0 else if AbsValue(strike_minus5_gex) > threshold then AbsValue(strike_minus5_gex) else 0;
    def minus6_gex = if IsNan(strike_minus6_gex) then 0 else if AbsValue(strike_minus6_gex) > threshold then AbsValue(strike_minus6_gex) else 0;
    def minus7_gex = if IsNan(strike_minus7_gex) then 0 else if AbsValue(strike_minus7_gex) > threshold then AbsValue(strike_minus7_gex) else 0;
    def minus8_gex = if IsNan(strike_minus8_gex) then 0 else if AbsValue(strike_minus8_gex) > threshold then AbsValue(strike_minus8_gex) else 0;
    def minus9_gex = if IsNan(strike_minus9_gex) then 0 else if AbsValue(strike_minus9_gex) > threshold then AbsValue(strike_minus9_gex) else 0;
    def minus10_gex = if IsNan(strike_minus10_gex) then 0 else if AbsValue(strike_minus10_gex) > threshold then AbsValue(strike_minus10_gex) else 0;

#def maxGEX = Max(Max(
#        Max(Max(base_gex, plus1_gex), Max(plus2_gex, plus3_gex)),
#        Max(Max(plus4_gex, plus5_gex), Max(plus6_gex, plus7_gex))
#), Max(
#        Max(Max(minus1_gex, minus2_gex), Max(minus3_gex, minus4_gex)),
#        Max(Max(minus5_gex, minus6_gex), Max(minus7_gex, minus8_gex))
#));

def maxGEX0 = Max(
        Max(Max(base_gex, plus1_gex), Max(plus2_gex, plus3_gex)),
        Max(Max(plus4_gex, plus5_gex), Max(plus6_gex, plus7_gex))
);
def maxGEX1 = Max(
        Max(Max(minus1_gex, minus2_gex), Max(minus3_gex, minus4_gex)),
        Max(Max(minus5_gex, minus6_gex), Max(minus7_gex, minus8_gex))
);
def maxGEX = Max(maxGEX0, maxGEX1);

#AddLabel(yes, "Max GEX: " + maxGEX, color.CYAN);

# Identify the associated strike
def maxGEXStrike = if maxGEX == base_gex then strike_base
                   else if maxGEX == plus1_gex then strike_plus1
                   else if maxGEX == plus2_gex then strike_plus2
                   else if maxGEX == plus3_gex then strike_plus3
                   else if maxGEX == plus4_gex then strike_plus4
                   else if maxGEX == plus5_gex then strike_plus5
                   else if maxGEX == plus6_gex then strike_plus6
                   else if maxGEX == plus7_gex then strike_plus7
                   else if maxGEX == minus1_gex then strike_minus1
                   else if maxGEX == minus2_gex then strike_minus2
                   else if maxGEX == minus3_gex then strike_minus3
                   else if maxGEX == minus4_gex then strike_minus4
                   else if maxGEX == minus5_gex then strike_minus5
                   else if maxGEX == minus6_gex then strike_minus6
                   else if maxGEX == minus7_gex then strike_minus7
                   else strike_minus8;

AddLabel(yes, "Max Strike: " + maxGEXStrike + "  ", color.CYAN);
Alert(maxGEXStrike != maxGEXStrike[1], "New Max GEX Strike is " + maxGEXStrike, Alert.ONCE, Sound.Bell);

plot maxStrikeLine = maxGEXStrike;
maxStrikeLine.setDefaultColor(color.Cyan);
maxStrikeLine.setLineWeight(5);
maxStrikeLine.setPaintingStrategy(paintingStrategy.Horizontal);
