# Gex Chart Upper V4 Jan 19, 2024
# Fixed the issue gex values being behind.
# Change Volatility from SeriesIV to Imp_Volatility 
# Twitter @2187Nick

declare upper;
declare once_per_bar;
input strikeSpacing = 1.0;
#input strikes = {default "0", "1", "2", "3", "4", "5", "6", "7", "8", #"9", "10"};
input strikes = 10;

input roundup = no; # helpful with stock price below $10
input manualcenterstrike = {default "false", "true"};
input centerstrike = 0;

input ManuallySetExpiration = {default "false", "true"};
input Expiration_YYMMDD = 231215;
def agg = AggregationPeriod.DAY;

def seconds_left = SecondsTillTime(1615);
def hours_left = seconds_left / 3600;
def days_left = if hours_left <= 0 then 0 else hours_left / 24;

#def IV = SeriesVolatility(series = 1);
def IV = imp_volatility(getSymbol());
#AddLabel(yes, "IV = " + IV);

def CurrentYear = GetYear() - 2000;
def CurrentMonth = GetMonth();
def CurrentDOM = GetDayOfMonth(GetYYYYMMDD());
def DateString_auto = GetYYYYMMDD() - 20000000;
def DateString = if ManuallySetExpiration then Expiration_YYMMDD else  DateString_auto;

def S = close(period = agg);
def r = 0;
def t = ((DateString - DateString_auto) + days_left) / 365;
def Sqr_IV_2 = Sqr(IV) / 2 * t;
def Sqrt_t_iv = IV * Sqrt(t);
def Sqrt_pi = Sqrt(2 * Double.Pi);
def Sqrt_t_iv_S = S * IV * Sqrt(t);

DefineGlobalColor("CallColor", Color.GREEN);
DefineGlobalColor("PutColor", Color.RED);
AddLabel(yes, AsPrice(DateString) + "C", GlobalColor("CallColor"));
AddLabel(yes, AsPrice(DateString) + "P", GlobalColor("PutColor"));

def openlevel = if manualcenterstrike then centerstrike else open(period = agg);
def rounding_factor = if strikeSpacing > 1 and strikeSpacing < 25 then -1 else if strikeSpacing > 24 then -2 else 0;
def floor_or_ceiling =  Round(openlevel, rounding_factor);
def base_strike = floor_or_ceiling;
#addlabel(yes, "base_strike: " + base_strike);

def strike_base = base_strike;
def strike_plus1 = base_strike + strikeSpacing;
def strike_plus2 = base_strike + strikeSpacing * 2;
def strike_plus3 = base_strike + strikeSpacing * 3;
def strike_plus4 = base_strike + strikeSpacing * 4;
def strike_plus5 = base_strike + strikeSpacing * 5;
def strike_plus6 = base_strike + strikeSpacing * 6;
def strike_plus7 = base_strike + strikeSpacing * 7;
def strike_plus8 = base_strike + strikeSpacing * 8;
def strike_plus9 = base_strike + strikeSpacing * 9;
def strike_plus10 = base_strike + strikeSpacing * 10;

def strike_minus1 = base_strike - strikeSpacing;
def strike_minus2 = base_strike - strikeSpacing * 2;
def strike_minus3 = base_strike - strikeSpacing * 3;
def strike_minus4 = base_strike - strikeSpacing * 4;
def strike_minus5 = base_strike - strikeSpacing * 5;
def strike_minus6 = base_strike - strikeSpacing * 6;
def strike_minus7 = base_strike - strikeSpacing * 7;
def strike_minus8 = base_strike - strikeSpacing * 8;
def strike_minus9 = base_strike - strikeSpacing * 9;
def strike_minus10 = base_strike - strikeSpacing * 10;

### Put Option open_interest
def putopen_interest = if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_base), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_base), period = agg);
def putopen_interest1 =  if strikes < 1 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus1), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus1), period = agg);
def putopen_interest2 =  if strikes < 2 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus2), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus2), period = agg);
def putopen_interest3 =  if strikes < 3 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus3), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus3), period = agg);
def putopen_interest4 = if strikes < 4 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus4), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus4), period = agg);
def putopen_interest5 = if strikes < 5 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus5), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus5), period = agg);
def putopen_interest6 = if strikes < 6 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus6), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus6), period = agg);
def putopen_interest7 = if strikes < 7 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus7), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus7), period = agg);
def putopen_interest8 = if strikes < 8 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus8), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus8), period = agg);
def putopen_interest9 = if strikes < 9 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus9), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus9), period = agg);
def putopen_interest10 = if strikes < 10 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus10), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_minus10), period = agg);

def putopen_interest1a =  if strikes < 1 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus1), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus1), period = agg);
def putopen_interest2a =  if strikes < 2 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus2), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus2), period = agg);
def putopen_interest3a =  if strikes < 3 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus3), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus3), period = agg);
def putopen_interest4a = if strikes < 4 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus4), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus4), period = agg);
def putopen_interest5a = if strikes < 5 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus5), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus5), period = agg);
def putopen_interest6a = if strikes < 6 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus6), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus6), period = agg);
def putopen_interest7a = if strikes < 7 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus7), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus7), period = agg);
def putopen_interest8a = if strikes < 8 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus8), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus8), period = agg);
def putopen_interest9a = if strikes < 9 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus9), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus9), period = agg);
def putopen_interest10a = if strikes < 10 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus10), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "P" + AsPrice(strike_plus10), period = agg);

###Call Option open_interest
def call_open_interest = if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_base), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_base), period = agg);
def call_open_interest1 =  if strikes < 1 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus1), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus1), period = agg);
def call_open_interest2 =  if strikes < 2 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus2), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus2), period = agg);
def call_open_interest3 =  if strikes < 3 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus3), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus3), period = agg);
def call_open_interest4 = if strikes < 4 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus4), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus4), period = agg);
def call_open_interest5 = if strikes < 5 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus5), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus5), period = agg);
def call_open_interest6 = if strikes < 6 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus6), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus6), period = agg);
def call_open_interest7 = if strikes < 7 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus7), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus7), period = agg);
def call_open_interest8 = if strikes < 8 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus8), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus8), period = agg);
def call_open_interest9 = if strikes < 9 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus9), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus9), period = agg);
def call_open_interest10 = if strikes < 10 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus10), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_plus10), period = agg);

def call_open_interest1a =  if strikes < 1 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus1), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus1), period = agg);
def call_open_interest2a =  if strikes < 2 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus2), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus2), period = agg);
def call_open_interest3a =  if strikes < 3 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus3), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus3), period = agg);
def call_open_interest4a = if strikes < 4 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus4), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus4), period = agg);
def call_open_interest5a = if strikes < 5 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus5), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus5), period = agg);
def call_open_interest6a = if strikes < 6 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus6), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus6), period = agg);
def call_open_interest7a = if strikes < 7 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus7), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus7), period = agg);
def call_open_interest8a = if strikes < 8 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus8), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus8), period = agg);
def call_open_interest9a = if strikes < 9 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus9), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus9), period = agg);
def call_open_interest10a = if strikes < 10 then 0 else if IsNaN(open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus10), period = agg)) then 0 else open_interest("." + GetSymbol() + AsPrice(DateString) + "C" + AsPrice(strike_minus10), period = agg);

### Gamma
def strike_base_gamma = (Exp(-(Sqr((Log(S / strike_base) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
#AddLabel(yes, base_strike + "_gamma: " + strike_base_gamma);
def strike_plus1_gamma = (Exp(-(Sqr((Log(S / strike_plus1) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
#AddLabel(yes, strike_plus1 + "_gamma: " + strike_plus1_gamma);
def strike_plus2_gamma = (Exp(-(Sqr((Log(S / strike_plus2) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_plus3_gamma = (Exp(-(Sqr((Log(S / strike_plus3) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_plus4_gamma = (Exp(-(Sqr((Log(S / strike_plus4) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_plus5_gamma = (Exp(-(Sqr((Log(S / strike_plus5) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_plus6_gamma = (Exp(-(Sqr((Log(S / strike_plus6) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_plus7_gamma = (Exp(-(Sqr((Log(S / strike_plus7) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_plus8_gamma = (Exp(-(Sqr((Log(S / strike_plus8) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_plus9_gamma = (Exp(-(Sqr((Log(S / strike_plus9) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_plus10_gamma = (Exp(-(Sqr((Log(S / strike_plus10) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;

###
def strike_minus1_gamma = (Exp(-(Sqr((Log(S / strike_minus1) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
#AddLabel(yes, strike_minus1 + "_gamma: " + strike_minus1_gamma);
def strike_minus2_gamma = (Exp(-(Sqr((Log(S / strike_minus2) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
#AddLabel(yes, strike_minus2 + "_gamma: " + strike_minus2_gamma);
def strike_minus3_gamma = (Exp(-(Sqr((Log(S / strike_minus3) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_minus4_gamma = (Exp(-(Sqr((Log(S / strike_minus4) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_minus5_gamma = (Exp(-(Sqr((Log(S / strike_minus5) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_minus6_gamma = (Exp(-(Sqr((Log(S / strike_minus6) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_minus7_gamma = (Exp(-(Sqr((Log(S / strike_minus7) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_minus8_gamma = (Exp(-(Sqr((Log(S / strike_minus8) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_minus9_gamma = (Exp(-(Sqr((Log(S / strike_minus9) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;
def strike_minus10_gamma = (Exp(-(Sqr((Log(S / strike_minus10) + Sqr_IV_2) / Sqrt_t_iv) / 2)) / Sqrt_pi) / Sqrt_t_iv_S;

### GEX
def strike_base_gex = Round((strike_base_gamma * (call_open_interest - putopen_interest) * S) / 10000, 0);
def strike_plus1_gex = Round((strike_plus1_gamma * (call_open_interest1 - putopen_interest1a) * S) / 10000, 0);
def strike_plus2_gex =  Round((strike_plus2_gamma * (call_open_interest2 - putopen_interest2a) * S) / 10000, 0);
def strike_plus3_gex =  Round((strike_plus3_gamma * (call_open_interest3 - putopen_interest3a) * S) / 10000, 0);
def strike_plus4_gex =  Round((strike_plus4_gamma * (call_open_interest4 - putopen_interest4a) * S) / 10000, 0);
def strike_plus5_gex =  Round((strike_plus5_gamma * (call_open_interest5 - putopen_interest5a) * S) / 10000, 0);
def strike_plus6_gex =  Round((strike_plus6_gamma * (call_open_interest6 - putopen_interest6a) * S) / 10000, 0);
def strike_plus7_gex =  Round((strike_plus7_gamma * (call_open_interest7 - putopen_interest7a) * S) / 10000, 0);
def strike_plus8_gex =  Round((strike_plus8_gamma * (call_open_interest8 - putopen_interest8a) * S) / 10000, 0);
def strike_plus9_gex =  Round((strike_plus9_gamma * (call_open_interest9 - putopen_interest9a) * S) / 10000, 0);
def strike_plus10_gex =  Round((strike_plus10_gamma * (call_open_interest10 - putopen_interest10a) * S) / 10000, 0);

def strike_minus1_gex =  Round((strike_minus1_gamma * (call_open_interest1a - putopen_interest1) * S) / 10000, 0);
def strike_minus2_gex =  Round((strike_minus2_gamma * (call_open_interest2a - putopen_interest2) * S) / 10000, 0);
def strike_minus3_gex =  Round((strike_minus3_gamma * (call_open_interest3a - putopen_interest3) * S) / 10000, 0);
def strike_minus4_gex =  Round((strike_minus4_gamma * (call_open_interest4a - putopen_interest4) * S) / 10000, 0);
def strike_minus5_gex =  Round((strike_minus5_gamma * (call_open_interest5a - putopen_interest5) * S) / 10000, 0);
def strike_minus6_gex =  Round((strike_minus6_gamma * (call_open_interest6a - putopen_interest6) * S) / 10000, 0);
def strike_minus7_gex =  Round((strike_minus7_gamma * (call_open_interest7a - putopen_interest7) * S) / 10000, 0);
def strike_minus8_gex =  Round((strike_minus8_gamma * (call_open_interest8a - putopen_interest8) * S) / 10000, 0);
def strike_minus9_gex =  Round((strike_minus9_gamma * (call_open_interest9a - putopen_interest9) * S) / 10000, 0);
def strike_minus10_gex =  Round((strike_minus10_gamma * (call_open_interest10a - putopen_interest10) * S) / 10000, 0);

#####################################

def shift_line_right = 5;

def lastbar = if IsNaN(close[-1]) and !IsNaN(close)  
              then BarNumber()  
              else lastbar[1]; 

#AddVerticalLine(BarNumber() >= HighestAll(lastbar +  shift_line_right) and  BarNumber() <= HighestAll(lastbar +  shift_line_right), "Gamma Exposure",color.white,Curve.LONG_DASH);






#AddChartBubble(yes, strike_minus1, strike_minus1_gex[5], color.cyan);


# time condition, height, display
#AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right-1), strike_minus1, strike_minus1_gex[shift_line_right-1], color.cyan);

#addlabel(yes, "check : " + if strike_minus1_gex and strikes > 0 then yes else no);

#and strike_minus1_gex and strikes > 0

AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_base_gex[shift_line_right-1]) > 0 and strikes > 0, strike_base, strike_base_gex[shift_line_right-1], if strike_base_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_base_gex[shift_line_right-1] > 0 then yes else no);

AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus1_gex[shift_line_right-1]) > 0 and strikes > 0, strike_plus1, strike_plus1_gex[shift_line_right-1], if strike_plus1_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus1_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus2_gex[shift_line_right-1]) > 0 and strikes > 1, strike_plus2, strike_plus2_gex[shift_line_right-1], if strike_plus2_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus2_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus3_gex[shift_line_right-1]) > 0 and strikes > 2, strike_plus3, strike_plus3_gex[shift_line_right-1], if strike_plus3_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus3_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus4_gex[shift_line_right-1]) > 0 and strikes > 3, strike_plus4, strike_plus4_gex[shift_line_right-1], if strike_plus4_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus4_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus5_gex[shift_line_right-1]) > 0 and strikes > 4, strike_plus5, strike_plus5_gex[shift_line_right-1], if strike_plus5_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus5_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus6_gex[shift_line_right-1]) > 0 and strikes > 5, strike_plus6, strike_plus6_gex[shift_line_right-1], if strike_plus6_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus6_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus7_gex[shift_line_right-1]) > 0 and strikes > 6, strike_plus7, strike_plus7_gex[shift_line_right-1], if strike_plus7_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus7_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus8_gex[shift_line_right-1]) > 0 and strikes > 7, strike_plus8, strike_plus8_gex[shift_line_right-1], if strike_plus8_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus8_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus9_gex[shift_line_right-1]) > 0 and strikes > 8, strike_plus9, strike_plus9_gex[shift_line_right-1], if strike_plus9_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus9_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_plus10_gex[shift_line_right-1]) > 0 and strikes > 9, strike_plus10, strike_plus10_gex[shift_line_right-1], if strike_plus10_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_plus10_gex[shift_line_right-1] > 0 then yes else no);

AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus1_gex[shift_line_right-1]) > 0 and strikes > 0, strike_minus1, strike_minus1_gex[shift_line_right-1], if strike_minus1_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus1_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus2_gex[shift_line_right-1]) > 0 and strikes > 1, strike_minus2, strike_minus2_gex[shift_line_right-1], if strike_minus2_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus2_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus3_gex[shift_line_right-1]) > 0 and strikes > 2, strike_minus3, strike_minus3_gex[shift_line_right-1], if strike_minus3_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus3_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus4_gex[shift_line_right-1]) > 0 and strikes > 3, strike_minus4, strike_minus4_gex[shift_line_right-1], if strike_minus4_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus4_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus5_gex[shift_line_right-1]) > 0 and strikes > 4, strike_minus5, strike_minus5_gex[shift_line_right-1], if strike_minus5_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus5_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus6_gex[shift_line_right-1]) > 0 and strikes > 5, strike_minus6, strike_minus6_gex[shift_line_right-1], if strike_minus6_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus6_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus7_gex[shift_line_right-1]) > 0 and strikes > 6, strike_minus7, strike_minus7_gex[shift_line_right-1], if strike_minus7_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus7_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus8_gex[shift_line_right-1]) > 0 and strikes > 7, strike_minus8, strike_minus8_gex[shift_line_right-1], if strike_minus8_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus8_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus9_gex[shift_line_right-1]) > 0 and strikes > 8, strike_minus9, strike_minus9_gex[shift_line_right-1], if strike_minus9_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus9_gex[shift_line_right-1] > 0 then yes else no);
AddChartBubble(BarNumber() == HighestAll(lastbar + shift_line_right -1) and AbsValue(strike_minus10_gex[shift_line_right-1]) > 0 and strikes > 9, strike_minus10, strike_minus10_gex[shift_line_right-1], if strike_minus10_gex[shift_line_right-1] > 0 then Color.GREEN else Color.RED, if strike_minus10_gex[shift_line_right-1] > 0 then yes else no);

plot strikebasegex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + AbsValue(strike_base_gex[shift_line_right-1]/10)) then strike_base else Double.NaN;
#addlabel(yes, "plus1gex: " + ( strike_plus1_gex));
plot strikeplus1gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus1_gex[shift_line_right-1]/10)) then strike_plus1 else Double.NaN;
plot strikeplus2gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus2_gex[shift_line_right-1]/10)) then strike_plus2 else Double.NaN;
plot strikeplus3gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus3_gex[shift_line_right-1]/10)) then strike_plus3 else Double.NaN;
plot strikeplus4gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus4_gex[shift_line_right-1]/10)) then strike_plus4 else Double.NaN;
plot strikeplus5gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus5_gex[shift_line_right-1]/10)) then strike_plus5 else Double.NaN;
plot strikeplus6gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus6_gex[shift_line_right-1]/10)) then strike_plus6 else Double.NaN;
plot strikeplus7gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus7_gex[shift_line_right-1]/10)) then strike_plus7 else Double.NaN;
plot strikeplus8gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus8_gex[shift_line_right-1]/10)) then strike_plus8 else Double.NaN;
plot strikeplus9gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus9_gex[shift_line_right-1]/10)) then strike_plus9 else Double.NaN;
plot strikeplus10gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_plus10_gex[shift_line_right-1]/10)) then strike_plus10 else Double.NaN;

plot strikeminus1gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus1_gex[shift_line_right-1]/10)) then strike_minus1 else Double.NaN;
plot strikeminus2gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus2_gex[shift_line_right-1]/10)) then strike_minus2 else Double.NaN;
plot strikeminus3gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus3_gex[shift_line_right-1]/10)) then strike_minus3 else Double.NaN;
plot strikeminus4gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus4_gex[shift_line_right-1]/10)) then strike_minus4 else Double.NaN;
plot strikeminus5gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus5_gex[shift_line_right-1]/10)) then strike_minus5 else Double.NaN;
plot strikeminus6gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus6_gex[shift_line_right-1]/10)) then strike_minus6 else Double.NaN;
plot strikeminus7gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus7_gex[shift_line_right-1]/10)) then strike_minus7 else Double.NaN;
plot strikeminus8gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus8_gex[shift_line_right-1]/10)) then strike_minus8 else Double.NaN;
plot strikeminus9gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus9_gex[shift_line_right-1]/10)) then strike_minus9 else Double.NaN;
plot strikeminus10gex = if BarNumber() >= HighestAll(lastbar + shift_line_right) and  BarNumber() <= HighestAll(lastbar + shift_line_right-1 + ABSValue(strike_minus10_gex[shift_line_right-1]/10)) then strike_minus10 else Double.NaN;

strikebasegex.AssignValueColor(if strike_base_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);

strikeplus1gex.AssignValueColor(if strike_plus1_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus2gex.AssignValueColor(if strike_plus2_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus3gex.AssignValueColor(if strike_plus3_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus4gex.AssignValueColor(if strike_plus4_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus5gex.AssignValueColor(if strike_plus5_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus6gex.AssignValueColor(if strike_plus6_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus7gex.AssignValueColor(if strike_plus7_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus8gex.AssignValueColor(if strike_plus8_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus9gex.AssignValueColor(if strike_plus9_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeplus10gex.AssignValueColor(if strike_plus10_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);

strikeminus1gex.AssignValueColor(if strike_minus1_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus2gex.AssignValueColor(if strike_minus2_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus3gex.AssignValueColor(if strike_minus3_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus4gex.AssignValueColor(if strike_minus4_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus5gex.AssignValueColor(if strike_minus5_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus6gex.AssignValueColor(if strike_minus6_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus7gex.AssignValueColor(if strike_minus7_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus8gex.AssignValueColor(if strike_minus8_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus9gex.AssignValueColor(if strike_minus9_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);
strikeminus10gex.AssignValueColor(if strike_minus10_gex[shift_line_right-1] >= 0 then Color.GREEN else Color.RED);

strikebasegex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus1gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus2gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus3gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus4gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus5gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus6gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus7gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus8gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus9gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeplus10gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);

strikeminus1gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus2gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus3gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus4gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus5gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus6gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus7gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus8gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus9gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
strikeminus10gex.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
