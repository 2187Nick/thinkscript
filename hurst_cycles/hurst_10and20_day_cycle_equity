# FLD Cross 10 and 20 Day Cycles Equity
# @2187Nick
# Use 4hr chart. Extended hours.
declare upper;
declare once_per_bar;
input cycle = {default "TenDay", "TwentyDay"};
def lookback = if cycle < 1 then 36 else 76;
def displace = if cycle < 1 then 4 else 9; #8
def line_color = if cycle < 1 then 5 else 0;

def currentBarNumber = if !IsNan(close) then BarNumber() else Double.Nan;
def lastBarNumber = HighestAll(currentBarNumber);
def lookbackBar = lastBarNumber - lookback + 1;

# Only plot in the lookback period
def doPlot = if currentBarNumber >= lookbackBar then 1 else 0;

def mostRecentHigh = CompoundValue(1, if doPlot && high > mostRecentHigh[1] then high else mostRecentHigh[1], Double.NEGATIVE_INFINITY);
def highBarNumber  = CompoundValue(1, if doPlot && high > mostRecentHigh[1] then currentBarNumber else highBarNumber[1], 0);
plot mrh = if currentBarNumber >= HighestAll(highBarNumber) then mostRecentHigh else Double.Nan;
mrh.SetDefaultColor(Color.GREEN);

def mostRecentLow = CompoundValue(1, if doPlot && low < mostRecentLow[1] then low else mostRecentLow[1],  Double.POSITIVE_INFINITY);
def lowBarNumber  = CompoundValue(1, if doPlot && low < mostRecentLow[1] then currentBarNumber else lowBarNumber[1], 0);
plot mrl = if currentBarNumber >= HighestAll(lowBarNumber) then mostRecentLow else Double.Nan;
mrl.SetDefaultColor(Color.RED);

#Plots a bubble at the cycle high
AddChartBubble( currentBarNumber == HighestAll(highBarNumber), high, cycle + " CycleHigh", Color.GREEN, yes);
#Plots a bubble at the cycle low
AddChartBubble(currentBarNumber == HighestAll(lowBarNumber), low, cycle + " CycleLow", Color.RED, no);
#Plots a bubble showing where lookback bar is. 
AddChartBubble(currentBarNumber == lookbackBar, (high + low) / 2, lookback + "\nBar", Color.GRAY, yes);

# Using 2 moving averages for now. 
# DailySMA1 Plots the Average Daily price shifted 4 Days into the future.
# The Cycle length is 8 days. So we shift it half that length forward.
# Using this to fill any gaps the above moving average has.
def DailySMA3 = Average(Fundamental(FundamentalType.OHLC4)[lookback/2], 6);

def DailySMA1 = Average(fundamental(FundamentalType.HL2, period = aggregationPeriod.DAY)[displace], 1);
def DailySMA2 = if !isNan(DailySMA1) then DailySMA1 else DailySMA3;
plot sma2 = DailySMA2;
sma2.SetDefaultColor(GetColor(line_color));
sma2.SetLineWeight(3);

# Find which ones is the lowest and we measure from there.
#def crossdownlevel = if DailySMA2 <= DailySMA2[1] then DailySMA2 else DailySMA2[1];
def crossdownlevel = (DailySMA2 + DailySMA2[1])/2;
# Distance from cycle high to the fld level
def crossdownTGT1 = crossdownlevel - 0.5 * (mostRecentHigh - crossdownlevel);
def crossdownTGT2 = crossdownlevel - (mostRecentHigh - crossdownlevel);

# Check if price crossed the fld level this period
def didwecrossdown = if close[1] > DailySMA2[1] and close < DailySMA2 then crossdownTGT1 else 0;

def crossdown_target1  = CompoundValue(1, if doPlot && close < DailySMA2 and didwecrossdown then crossdownTGT1 else crossdown_target1[1], Double.Nan);
def crossdown_target2  = CompoundValue(1, if doPlot && close < DailySMA2 and didwecrossdown then crossdownTGT2 else crossdown_target2[1], Double.Nan);
plot crossdownTarget1 = if close < DailySMA2 and crossdown_target1 < DailySMA2 and close > crossdown_target2 then crossdown_target1 else Double.Nan; 
crossdownTarget1.SetDefaultColor(Color.violet);

AddLabel(close < DailySMA2 and close > crossdown_target2, "Target1: " +  Round(crossdown_target1, 1), Color.RED);
AddLabel(close < DailySMA2 and close > crossdown_target2, "Target2: " + Round(crossdown_target2, 1) , Color.RED);
plot crossdownTarget2 = if close < DailySMA2 and crossdown_target1  < DailySMA2 and close > crossdown_target2 then crossdown_target2 else Double.Nan;
crossdownTarget2.SetDefaultColor(Color.violet);
AddCloud(crossdownTarget2, crossdownTarget1, Color.red, Color.red);

# Find which ones is the highest and we measure from there.
#def crossuplevel = if DailySMA2 >= DailySMA2[1] then DailySMA2 else DailySMA2[1];
def crossuplevel = (DailySMA2 + DailySMA2[1])/2;
def crossupTGT1 = 0.5 * (crossuplevel - mostRecentLow) + crossuplevel;
def crossupTGT2 = (crossuplevel - mostRecentLow) + crossuplevel;

# Check if price crossed the fld level this period
def didwecrossup = if close[1] < DailySMA2[1] and close > DailySMA2 then crossupTGT1 else 0;

def crossup_target1  = CompoundValue(1, if doPlot && close > DailySMA2 and didwecrossup then crossupTGT1 else crossup_target1[1], Double.Nan);
def crossup_target2  = CompoundValue(1, if doPlot && close > DailySMA2 and didwecrossup then crossupTGT2 else crossup_target2[1], Double.Nan);

plot crossupTarget1 = if close > DailySMA2 and crossup_target1 > DailySMA2 and close < crossup_target2 then crossup_target1 else Double.Nan;
crossupTarget1.SetDefaultColor(Color.blue);

AddLabel(close > DailySMA2 and close < crossup_target2, "Target1: " +  Round(crossup_target1, 1), Color.GREEN);
AddLabel(close > DailySMA2 and close < crossup_target2, "Target2: " + Round(crossup_target2, 1), Color.GREEN);
plot crossupTarget2 = if close > DailySMA2 and crossup_target1 > DailySMA2 and close < crossup_target2 then crossup_target2 else Double.Nan;
crossupTarget2.SetDefaultColor(Color.blue);

AddCloud(crossupTarget2, crossupTarget1, Color.GREEN, Color.GREEN);
